<?php

/**
 * @file
 * Implement XMLSitemap FieldCollection formatter.
 */

/**
 * Implements hook_field_formatter_info().
 */
function xmlsitemap_fieldcollection_formatter_field_formatter_info() {
  return array(
    'xmlsitemap_fieldcollection_view' => array(
      'label' => t('XMLSitemap: FieldCollection'),
      'field types' => array('field_collection'),
      'settings' =>  array(
        'view_mode' => 'full',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function xmlsitemap_fieldcollection_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  if (empty($entity->xmlsitemap_elements)) {
    $entity->xmlsitemap_elements = array();
  }

  switch ($display['type']) {
    case 'xmlsitemap_fieldcollection_view':
      $element_items = array();
      $view_mode = !empty($display['settings']['view_mode']) ? $display['settings']['view_mode'] : 'full';
      if ($entity->type == 'gallery') {
        foreach ($items as $delta => $item) {
          if ($field_collection = field_collection_field_get_entity($item)) {
            if ($entity_items = field_get_items('field_collection_item', $field_collection, 'field_slide_image')) {
              $entity_item = reset($entity_items);
              $target_entity = node_load($entity_item['target_id']);
              if ($target_entity->type == 'image') {
                $target_entity->xmlsitemap_elements = array();
                entity_view('node', array($target_entity), 'xmlsitemap');
                $element_items[] = $target_entity->xmlsitemap_elements;
              }
            }
          }
        }
      }
      // Addresses have arbitrary depth and need to be handled recursively.
      $entity->xmlsitemap_elements = array_replace_recursive($entity->xmlsitemap_elements, $element_items);
      break;
  }
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function xmlsitemap_fieldcollection_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $elements = array();

  // Add a select form element for view_mode if viewing the rendered field_collection.
  if ($display['type'] == 'xmlsitemap_fieldcollection_view') {

    $entity_type = entity_get_info('field_collection_item');
    $options = array();
    foreach ($entity_type['view modes'] as $mode => $info) {
      $options[$mode] = $info['label'];
    }

    $elements['view_mode'] = array(
      '#type' => 'select',
      '#title' => t('View mode'),
      '#options' => $options,
      '#default_value' => $settings['view_mode'],
      '#description' => t('Select the view mode'),
    );
  }

  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function xmlsitemap_fieldcollection_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $output = array();

  if ($display['type'] == 'xmlsitemap_fieldcollection_view') {
    $entity_type = entity_get_info('field_collection_item');
    if (!empty($entity_type['view modes'][$settings['view_mode']]['label'])) {
      $output[] =  t('View mode: @mode', array('@mode' => $entity_type['view modes'][$settings['view_mode']]['label']));
    }
  }

  return implode('<br />', $output);
}
