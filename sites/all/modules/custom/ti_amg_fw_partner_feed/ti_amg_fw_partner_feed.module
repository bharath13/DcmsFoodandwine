<?php
// ti_amg_fw_partner_feed.module
/**
 * Implementation of hook_services_services().
 */
function ti_amg_fw_partner_feed_services_resources() {
  return array(
    'feed' => array(
      'retrieve' => array(
        'help' => 'Retrieves a partner_feed',
        'file' => array('file' => 'inc', 'module' => 'ti_amg_fw_partner_feed'),
        'callback' => '_ti_amg_fw_partner_feed_retrieve',
        'access callback' => '_ti_amg_fw_partner_feed_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'string',
            'description' => 'The id of the partner_feed to get',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
          array(
            'name' => 'name',
            'type' => 'string',
            'description' => 'The id of the partner_feed to get',
            'source' => array('param' => 'name'),
            'optional' => FALSE,
          ),
        ),
      ),
    ),
  );
}

/*
 * Implementing hook_rest_server_response_formatters_alter
 * Selecting custom class for xml generation instead of default
 */

function ti_amg_fw_partner_feed_rest_server_response_formatters_alter(&$formatters) {
    $formatters['xml']['formatter class'] = 'CustomRESTServerView';
}

class CustomRESTServerView implements ServicesFormatterInterface {

    public function render($data) {
        $doc = new DOMDocument('1.0', 'utf-8');
        $root = $doc->createElement('recipe_articles');
        $doc->appendChild($root);

        $this->xml_recursive($doc, $root, $data);

        return $doc->saveXML();
    }

    private function xml_recursive(&$doc, &$parent, $data) {
        if (is_object($data)) {
            $data = get_object_vars($data);
        }

        if (is_array($data)) {
            $assoc = FALSE || empty($data);
            foreach ($data as $key => $value) {
                if (is_numeric($key)) {
                    $key = 'recipe_article';
                }
                else {
                    $assoc = TRUE;
                    $key = preg_replace('/[^A-Za-z0-9_]/', '_', $key);
                    $key = preg_replace('/^([0-9]+)/', '_$1', $key);
                    $key = preg_replace('/[0-9]/', '', $key);
                }
                $element = $doc->createElement($key);
                $parent->appendChild($element);
                $this->xml_recursive($doc, $element, $value);
            }
        }
        elseif ($data !== NULL) {
            $parent->appendChild($doc->createTextNode($data));
        }
    }

}
