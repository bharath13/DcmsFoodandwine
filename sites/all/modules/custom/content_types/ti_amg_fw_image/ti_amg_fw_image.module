<?php
/**
 * @file
 * Code for the TI AMG FW Image feature.
 *
 * \defgroup ti_amg_fw_image FoodandWine.com Image
 * \ingroup Features
 * \brief Provides the Image content type and fields for COOK.com
 *
 * @{
 */

include_once 'ti_amg_fw_image.features.inc';


/**
 * Implements hook_entity_info_alter().
 *
 * \details Provides view_modes for all of the different sizes
 *          that images can be displayed.
 */
function ti_amg_fw_image_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes'] += array(
    'image_thumb' => array(
      'label' => t('Image: Thumbnail (75x75)'),
      'custom settings' => FALSE,
    ),
    'image_150x150' => array(
      'label' => t('Image: 150x150'),
      'custom settings' => FALSE,
    ),
    'image_300x300' => array(
      'label' => t('Image: 300x300'),
      'custom settings' => FALSE,
    ),
    'image_420x420' => array(
      'label' => t('Image: 420x420'),
      'custom settings' => FALSE,
    ),
    'image_500xVariable' => array(
      'label' => t('Image: 500xVariable'),
      'custom settings' => FALSE,
    ),
    'image_768x768' => array(
      'label' => t('Image: 768x768'),
      'custom settings' => FALSE,
    ),
  );
}

/**
 * Implements template_preprocess_node().
 *
 * \details Sets and customizes the title variable for images based on the
 *          view_mode in which it is displayed. For most view_modes the
 *          title is unneeded and removed. For others the title is set to
 *          the value of `field_headline`.
 */
function ti_amg_fw_image_preprocess_node(&$variables) {
  $view_mode = $variables['view_mode'];
  $node = $variables['node'];

  if ($node->type == 'image') {
    switch ($view_mode) {
      case 'gallery_slide_text':
        $field_headline = field_view_field('node', $node, 'field_headline', array('label' => 'hidden'));
        $variables['title'] = drupal_render($field_headline);
        break;

      case 'calendar_day_thumbnail':
        // This view_mode is used for the "view all" page on calendars,
        // so we can get the calendar node from the menu callback.
        $calendar_node = menu_get_object();
        $days = field_get_items('node', $calendar_node, 'field_calendar_days');
        foreach ($days as $k => $day_ref) {
          $days[$k] = $day_ref['target_id'];
        }

        if (!empty($calendar_node) && $calendar_node->type == 'calendar') {
          $day_index = array_search($node->nid, $days);

          // Get the start date for the calendar.
          $start_date = field_get_items('node', $calendar_node, 'field_start_date');
          $start_date_object = new DateTime($start_date[0]['value'], new DateTimeZone($start_date[0]['timezone_db']));
          $start_date_object->setTimeZone(new DateTimeZone($start_date[0]['timezone']));

          $current_date = clone $start_date_object;
          $current_date->add(date_interval_create_from_date_string($day_index . ' days'));

          $variables['content']['calendar_date'] = array(
            '#weight' => -10,
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('calendar-month__day__date'),
            ),
            'date' => array(
              '#markup' => $current_date->format('d'),
            ),
          );

          $image = $variables['content']['field_image_thumb'];
          $variables['content']['field_image_thumb'] = array(
            '#markup' => l(drupal_render($image), _ti_amg_fw_calendar_get_day_url($calendar_node, $day_index), array('html' => TRUE)),
            '#weight' => $image['#weight'],
          );

          $headline = $variables['content']['field_headline'];
          $variables['content']['field_headline'] = array(
            '#markup' => l(drupal_render($headline), _ti_amg_fw_calendar_get_day_url($calendar_node, $day_index), array('html' => TRUE)),
            '#weight' => $headline['#weight'],
          );
        }
        $variables['title'] = FALSE;
        break;

      default:
        $variables['title'] = FALSE;
        break;
    }

    // Hide information-only fields here:
    // - field_caption, field_alt_text, and field_credits.
    hide($variables['content']['field_caption']);
    hide($variables['content']['field_credit']);
    hide($variables['content']['field_alt_text']);
  }
}

/**
 * Implements hook_init().
 *
 * \details Prevents Image nodes from being viewed at their node/%nid path,
 *          except by administrators. Images are only allowed to be viewed
 *          within the context of some other piece of content.
 */
function ti_amg_fw_image_init() {
  if (function_exists('ti_amg_fw_base_components_prevent_node_view')) {
    ti_amg_fw_base_components_prevent_node_view('image');
  }
}

/**
 * Implements hook_node_view().
 *
 * \details Generates all image_styles for a given image.
 */
function ti_amg_fw_image_node_view($node, $view_mode, $langcode) {
  if ((user_is_logged_in()) && ($node->type == 'image')) {
    $images = NULL;

    foreach(image_styles() as $style) {
      if (isset($node->field_image['und'][0]['uri'])) {
        $style_name = $style['name'];
        $path = $node->field_image['und'][0]['uri'];
        $image_style_data = image_style_load($style_name);

        $vars = array(
          'style_name' => $style['name'],
          'path' => $path,
          'title' => $style['name'],
          'height' => NULL,
          'width' => NULL,
        );
        $images[$style_name]['img_tag'] = theme_image_style($vars);

        $images[$style_name]['name'] = $style_name;
        if (isset($image_style_data['effects']) && !empty($image_style_data['effects'])) {
          $effects = reset($image_style_data['effects']);
          $images[$style_name]['width'] = $effects['data']['width'];
          $images[$style_name]['height'] =  $effects['data']['height'];
        }
        else {
          $images[$style_name]['width'] = 0;
          $images[$style_name]['height'] = 0;
        }
      }
    }
    usort($images, '_ti_amg_fw_image_cmp');

    $list_elems = '';
    foreach ($images as $img) {
      $list_elems .= '<li style="padding-bottom:25px">' . $img['img_tag'] . '<br>' . $img['name']
                  . '<br>' . l('View Crop', image_style_url($img['name'], $path), array('attributes' => array('target' => '_blank')))
                  . '</li>';
    }

    $html = theme(
      'ctools_collapsible',
      array(
        'handle' => 'Click to see all image styles',
        'content' => $list_elems,
        'collapsed' => TRUE
      )
    );

    $node->content['list'] = array (
      '#prefix' => '<ul style="margin-top:25px">',
      '#markup' => $html,
      '#suffix' => '</ul>',
      '#weight' => 50,
    );
  }
}


/**
 *  Function for array usort that orders an array of images by width
 *
 * \details usort comparison function. Orders by width.
 *
 * @param array $a
 * @param array $b
 * @return Int
 */
function _ti_amg_fw_image_cmp($a, $b) {
  if ($a['width'] == $b['width']) {
    return 0;
  }
  else {
    return ($a['width'] < $b['width']) ? -1 : 1;
  }
}

/**@}*/
